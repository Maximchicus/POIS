#lang racket

(display "Задание 7\n")
(display " \n")
(define myList (list 1 2 3 4 5 6 "as" 8))
(define (perf myList)
(cond ((and (number? (first myList)) (number? (third myList))
(number? (seventh myList)))
(+ (first myList) (third myList) (seventh myList)))
(else (last myList))
)
)
(display (perf myList))

(display "\nЗадание 11\n")
(display " \n")
(define firstList (list 1 2 3 4 5 6 "as" 8))
(define secondList (list 1 2 3 4 5 6 "as" 8))
(define (makeLists firstList secondList)
(list (list (first firstList) (third secondList))
(list (second secondList) (last firstList)))
)
(display (makeLists firstList secondList))

(display "Задание 13\n")
(display " \n")
(define a(read))
(define b(read))
(define c(read))
(define (makeList a b c)
( cond ((= (remainder (* a b c) 2) 1)
(list (* a a a) (* b b b) (* c c c))
)
(else (+ a b c))
)
)
(display (makeList a b c))